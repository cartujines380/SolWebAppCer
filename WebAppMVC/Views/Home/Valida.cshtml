
<div ng-controller="GeneralController">
    <form name="userForm" ng-submit="submitForm()" novalidate>

        <!-- NAME -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.name.$invalid && (userForm.name.$dirty || submitted)}">
            <label>Name</label>
            <input type="text" name="name" class="form-control" ng-model="user.name" placeholder="Your Name" ng-required="true">
            <p ng-show="userForm.name.$error.required && (userForm.name.$dirty || submitted)" class="help-block">You name is required.</p>
        </div>

        <!-- USERNAME -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.username.$invalid && (userForm.username.$dirty || submitted)}">
            <label>Username</label>
            <input type="text" name="username" class="form-control" ng-model="user.username" placeholder="Your Username" ng-minlength="3" ng-maxlength="8" ng-required="true">
            <p ng-show="userForm.username.$error.required && (userForm.username.$dirty || submitted)" class="help-block">You username is required.</p>
            <p ng-show="userForm.username.$error.minlength && (userForm.username.$dirty || submitted)" class="help-block">Username is too short.</p>
            <p ng-show="userForm.username.$error.maxlength && (userForm.username.$dirty || submitted)" class="help-block">Username is too long.</p>
        </div>

        <!-- PASSWORD -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.password.$invalid && (userForm.password.$dirty || submitted)}">
            <label>Password</label>
            <input type="Password" name="password" class="form-control" ng-model="user.password" placeholder="Your Password" ng-required="true">
            <p ng-show="userForm.password.$error.required && (userForm.password.$dirty || submitted)" class="help-block">Your password is required.</p>
        </div>

        <!-- CONFIRM PASSWORD -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.confirmPassword.$invalid && (userForm.confirmPassword.$dirty || submitted)}">
            <label>Confirm Password</label>
            <input type="Password" name="confirmPassword" class="form-control" ng-model="user.confirmPassword" placeholder="Confirm Your Password" ng-compare="password" ng-required="true">
            <p ng-show="userForm.confirmPassword.$error.required && (userForm.confirmPassword.$dirty || submitted)" class="help-block">Your confirm password is required.</p>
            <p ng-show="userForm.confirmPassword.$error.compare  && (userForm.confirmPassword.$dirty || submitted)" class="help-block">Confirm password doesnot match.</p>
        </div>

        <!-- EMAIL -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.email.$invalid && (userForm.email.$dirty || submitted)}">
            <label>Email</label>
            <input type="email" name="email" class="form-control" ng-model="user.email" placeholder="Your Email Address" ng-required="true">
            <p ng-show="userForm.email.$error.required && (userForm.email.$dirty || submitted)" class="help-block">Email is required.</p>
            <p ng-show="userForm.email.$error.email && (userForm.email.$dirty || submitted)" class="help-block">Enter a valid email.</p>
        </div>

        <!-- CONTACTNO -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.contactno.$invalid  && (userForm.contactno.$dirty || submitted) }">
            <label>ContactNo</label>
            <input type="text" name="contactno" class="form-control" ng-model="user.contactno" placeholder="Your Contact No" ng-pattern="/^[789]\d{9}$/" maxlength="10">
            <p ng-show="userForm.contactno.$error.pattern  && (userForm.contactno.$dirty || submitted)" class="help-block">Enter a valid contactno.</p>
        </div>

        <!-- Estados -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.city.$invalid  && (userForm.estado.$dirty || submitted)}" ng-controller="GeneralController">
            <label>Estados</label>
            @*<select name="estado" id="selectestado" class="multiselect" multiple ng-model="selectedItem" ng-options="item as item.detalle for item in EstadoSolicitudArt">
                    <option value="">
                        Seleccione un Estado
                    </option>
                </select>*@

            <div>
                <div ng-dropdown-multiselect="" options="EstadoSolicitudArt" checkboxes="true"   selected-model="example2model" extra-settings="example2settings" ></div>
            </div>

            <input type="button" name="name" value="Ver seleccion" ng-click="verseleccion()" />

            <p ng-show="userForm.estado.$error.required  && (userForm.estado.$dirty || submitted)" class="help-block">Select Estado.</p>
        </div>

        <!-- COUNTRY -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.country.$invalid  && (userForm.country.$dirty || submitted)}">
            <label>Country</label>
            <select name="country" class="form-control"
                    ng-model="user.country"
                    ng-options="country.CountryId as country.Name for country in countryList"
                    ng-required="true">
                <option value=''>Select</option>
            </select>
            <p ng-show="userForm.country.$error.required  && (userForm.country.$dirty || submitted)" class="help-block">Select country.</p>
        </div>



        <!-- CITY -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.city.$invalid  && (userForm.city.$dirty || submitted)}">
            <label>City</label>
            <select name="city" class="form-control"
                    ng-model="user.city"
                    ng-options="city.CityId as city.Name for city in cityList"
                    ng-required="true">
                <option value=''>Select</option>
            </select>
            <p ng-show="userForm.city.$error.required  && (userForm.city.$dirty || submitted)" class="help-block">Select city.</p>
        </div>

        <!-- TERMS & CONDITIONS -->
        <div class="form-group" ng-class="{ 'has-error' : userForm.terms.$invalid && (userForm.terms.$dirty || submitted)}">
            <label>Accept Terms & Conditions</label>
            <input type="checkbox" value="" name="terms" ng-model="user.terms" ng-required="true" />
            <p ng-show="userForm.terms.$error.required && (userForm.terms.$dirty || submitted)" class="help-block">Accept terms & conditions.</p>
        </div>

        <!-- ng-disabled FOR ENABLING AND DISABLING SUBMIT BUTTON -->
        <!--<button type="submit" class="btn btn-primary" ng-disabled="userForm.$invalid">Register</button>-->
        <button type="submit" style="background-color:darkred" class="btn btn-primary">Register</button>
    </form>
</div>

@section Scripts
    {
<script src="../assets/js/bootstrap.js"></script>
<link rel="stylesheet" href="../assets/css/bootstrap-multiselect.css" />
<link rel="stylesheet" href="../assets/css/select2.css" />
<script src="../assets/js/jquery.bootstrap-duallistbox.js"></script>
<script src="../assets/js/bootstrap-multiselect.js"></script>
<script src="../assets/js/jquery.raty.js"></script>
<script src="../assets/js/select2.js"></script>
<script src="../assets/js/typeahead.jquery.js"></script>


   <script type="text/javascript">
       jQuery(function ($) {
           var demo1 = $('select[name="duallistbox_demo1[]"]').bootstrapDualListbox({ infoTextFiltered: '<span class="label label-purple label-lg">Filtered</span>' });
           var container1 = demo1.bootstrapDualListbox('getContainer');
           container1.find('.btn').addClass('btn-white btn-info btn-bold');

           /**var setRatingColors = function() {
               $(this).find('.star-on-png,.star-half-png').addClass('orange2').removeClass('grey');
               $(this).find('.star-off-png').removeClass('orange2').addClass('grey');
           }*/
           $('.rating').raty({
               'cancel': true,
               'half': true,
               'starType': 'i'
               /**,

               'click': function() {
                   setRatingColors.call(this);
               },
               'mouseover': function() {
                   setRatingColors.call(this);
               },
               'mouseout': function() {
                   setRatingColors.call(this);
               }*/
           })//.find('i:not(.star-raty)').addClass('grey');



           //////////////////
           //select2
           $('.select2').css('width', '200px').select2({ allowClear: true })
           $('#select2-multiple-style .btn').on('click', function (e) {
               var target = $(this).find('input[type=radio]');
               var which = parseInt(target.val());
               if (which == 2) $('.select2').addClass('tag-input-style');
               else $('.select2').removeClass('tag-input-style');
           });

           //////////////////
           $('.multiselect').multiselect({
               enableFiltering: true,
               buttonClass: 'btn btn-white btn-primary',
               templates: {
                   button: '<button type="button" class="multiselect dropdown-toggle" data-toggle="dropdown"></button>',
                   ul: '<ul class="multiselect-container dropdown-menu"></ul>',
                   filter: '<li class="multiselect-item filter"><div class="input-group"><span class="input-group-addon"><i class="fa fa-search"></i></span><input class="form-control multiselect-search" type="text"></div></li>',
                   filterClearBtn: '<span class="input-group-btn"><button class="btn btn-default btn-white btn-grey multiselect-clear-filter" type="button"><i class="fa fa-times-circle red2"></i></button></span>',
                   li: '<li><a href="javascript:void(0);"><label></label></a></li>',
                   divider: '<li class="multiselect-item divider"></li>',
                   liGroup: '<li class="multiselect-item group"><label class="multiselect-group"></label></li>'
               }
           });


           ///////////////////

           //typeahead.js
           //example taken from plugin's page at: https://twitter.github.io/typeahead.js/examples/
           var substringMatcher = function (strs) {
               return function findMatches(q, cb) {
                   var matches, substringRegex;

                   // an array that will be populated with substring matches
                   matches = [];

                   // regex used to determine if a string contains the substring `q`
                   substrRegex = new RegExp(q, 'i');

                   // iterate through the pool of strings and for any string that
                   // contains the substring `q`, add it to the `matches` array
                   $.each(strs, function (i, str) {
                       if (substrRegex.test(str)) {
                           // the typeahead jQuery plugin expects suggestions to a
                           // JavaScript object, refer to typeahead docs for more info
                           matches.push({ value: str });
                       }
                   });

                   cb(matches);
               }
           }

           $('input.typeahead').typeahead({
               hint: true,
               highlight: true,
               minLength: 1
           }, {
               name: 'states',
               displayKey: 'value',
               source: substringMatcher(ace.vars['US_STATES'])
           });


           ///////////////


           //in ajax mode, remove remaining elements before leaving page
           $(document).one('ajaxloadstart.page', function (e) {
               $('[class*=select2]').remove();
               $('select[name="duallistbox_demo1[]"]').bootstrapDualListbox('destroy');
               $('.rating').raty('destroy');
               $('.multiselect').multiselect('destroy');
           });

       });
</script>
}